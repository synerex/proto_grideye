syntax = "proto3";

package grideye;

option go_package="github.com/synerex/proto_grideye";


import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// GridEye Service message
message GridEye  // per Raspberry Pi Data Message
{   string device_id = 1;  // not used
    string hostname = 2;   // of Raspberry Pi
    string location = 3;   // of Raspberry Pi
    string mac = 4;        // of Raspberry Pi
    string ip = 5;         // of Raspberry Pi
    uint64 seq = 6;        // sequence number
    google.protobuf.Timestamp ts = 7;
    repeated GridEyeEvent data = 8;   // message has several event data.
}

message GridEyeEvent 
{
    string typ = 1;   // one of "sensor", "keepAlive", etc.
    string id = 2;    // of Grid Eye Sensor
    uint64 seq = 3;   // sequence number
    google.protobuf.Timestamp ts = 4;
    repeated double temps = 5;  // Sensed Data by Grid Eye
    repeated uint32 audioSpectrum = 6;  // Sensed Data by Microphone
}

message GridEyes
{
    repeated GridEye messages = 1; // multiple counter data for first transfer
}

message Retrieve  // Request & Response of Data Retrieve
{
    google.protobuf.Timestamp from = 1;
    google.protobuf.Duration duration = 2;
    GridEyes result = 3;
}
