// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.13.0
// source: grideye.proto

package proto_grideye

import (
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// GridEye Service message
type GridEye struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string               `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Hostname string               `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Location string               `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Mac      string               `protobuf:"bytes,4,opt,name=mac,proto3" json:"mac,omitempty"`
	Ip       string               `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	Seq      uint64               `protobuf:"varint,6,opt,name=seq,proto3" json:"seq,omitempty"` // sequence number
	Ts       *timestamp.Timestamp `protobuf:"bytes,7,opt,name=ts,proto3" json:"ts,omitempty"`
	Data     []*GridEyeEvent      `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty"` // message has several event data.
}

func (x *GridEye) Reset() {
	*x = GridEye{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grideye_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GridEye) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridEye) ProtoMessage() {}

func (x *GridEye) ProtoReflect() protoreflect.Message {
	mi := &file_grideye_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridEye.ProtoReflect.Descriptor instead.
func (*GridEye) Descriptor() ([]byte, []int) {
	return file_grideye_proto_rawDescGZIP(), []int{0}
}

func (x *GridEye) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *GridEye) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GridEye) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GridEye) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *GridEye) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GridEye) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *GridEye) GetTs() *timestamp.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *GridEye) GetData() []*GridEyeEvent {
	if x != nil {
		return x.Data
	}
	return nil
}

type GridEyeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Typ   string               `protobuf:"bytes,1,opt,name=typ,proto3" json:"typ,omitempty"` // one of "sensor", "keepAlive", etc.
	Id    string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Seq   uint64               `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"` // sequence number (onr)
	Ts    *timestamp.Timestamp `protobuf:"bytes,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Temps []float64            `protobuf:"fixed64,5,rep,packed,name=temps,proto3" json:"temps,omitempty"`
}

func (x *GridEyeEvent) Reset() {
	*x = GridEyeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grideye_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GridEyeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridEyeEvent) ProtoMessage() {}

func (x *GridEyeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_grideye_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridEyeEvent.ProtoReflect.Descriptor instead.
func (*GridEyeEvent) Descriptor() ([]byte, []int) {
	return file_grideye_proto_rawDescGZIP(), []int{1}
}

func (x *GridEyeEvent) GetTyp() string {
	if x != nil {
		return x.Typ
	}
	return ""
}

func (x *GridEyeEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GridEyeEvent) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *GridEyeEvent) GetTs() *timestamp.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *GridEyeEvent) GetTemps() []float64 {
	if x != nil {
		return x.Temps
	}
	return nil
}

type GridEyes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*GridEye `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"` // multiple counter data for first transfer
}

func (x *GridEyes) Reset() {
	*x = GridEyes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grideye_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GridEyes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridEyes) ProtoMessage() {}

func (x *GridEyes) ProtoReflect() protoreflect.Message {
	mi := &file_grideye_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridEyes.ProtoReflect.Descriptor instead.
func (*GridEyes) Descriptor() ([]byte, []int) {
	return file_grideye_proto_rawDescGZIP(), []int{2}
}

func (x *GridEyes) GetMessages() []*GridEye {
	if x != nil {
		return x.Messages
	}
	return nil
}

type Retrieve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From     *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Duration *duration.Duration   `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Result   *GridEyes            `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Retrieve) Reset() {
	*x = Retrieve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grideye_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Retrieve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Retrieve) ProtoMessage() {}

func (x *Retrieve) ProtoReflect() protoreflect.Message {
	mi := &file_grideye_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Retrieve.ProtoReflect.Descriptor instead.
func (*Retrieve) Descriptor() ([]byte, []int) {
	return file_grideye_proto_rawDescGZIP(), []int{3}
}

func (x *Retrieve) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Retrieve) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Retrieve) GetResult() *GridEyes {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_grideye_proto protoreflect.FileDescriptor

var file_grideye_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x72, 0x69, 0x64, 0x65, 0x79, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x67, 0x72, 0x69, 0x64, 0x65, 0x79, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x01, 0x0a, 0x07, 0x47, 0x72,
	0x69, 0x64, 0x45, 0x79, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x2a,
	0x0a, 0x02, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x69, 0x64, 0x65,
	0x79, 0x65, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x45, 0x79, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x47, 0x72, 0x69, 0x64, 0x45, 0x79,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x79, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x79, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x22, 0x38, 0x0a, 0x08,
	0x47, 0x72, 0x69, 0x64, 0x45, 0x79, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x72, 0x69,
	0x64, 0x65, 0x79, 0x65, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x45, 0x79, 0x65, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x69,
	0x64, 0x65, 0x79, 0x65, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x45, 0x79, 0x65, 0x73, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x79, 0x6e, 0x65, 0x72, 0x65, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x65, 0x79, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_grideye_proto_rawDescOnce sync.Once
	file_grideye_proto_rawDescData = file_grideye_proto_rawDesc
)

func file_grideye_proto_rawDescGZIP() []byte {
	file_grideye_proto_rawDescOnce.Do(func() {
		file_grideye_proto_rawDescData = protoimpl.X.CompressGZIP(file_grideye_proto_rawDescData)
	})
	return file_grideye_proto_rawDescData
}

var file_grideye_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_grideye_proto_goTypes = []interface{}{
	(*GridEye)(nil),             // 0: grideye.GridEye
	(*GridEyeEvent)(nil),        // 1: grideye.GridEyeEvent
	(*GridEyes)(nil),            // 2: grideye.GridEyes
	(*Retrieve)(nil),            // 3: grideye.Retrieve
	(*timestamp.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*duration.Duration)(nil),   // 5: google.protobuf.Duration
}
var file_grideye_proto_depIdxs = []int32{
	4, // 0: grideye.GridEye.ts:type_name -> google.protobuf.Timestamp
	1, // 1: grideye.GridEye.data:type_name -> grideye.GridEyeEvent
	4, // 2: grideye.GridEyeEvent.ts:type_name -> google.protobuf.Timestamp
	0, // 3: grideye.GridEyes.messages:type_name -> grideye.GridEye
	4, // 4: grideye.Retrieve.from:type_name -> google.protobuf.Timestamp
	5, // 5: grideye.Retrieve.duration:type_name -> google.protobuf.Duration
	2, // 6: grideye.Retrieve.result:type_name -> grideye.GridEyes
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_grideye_proto_init() }
func file_grideye_proto_init() {
	if File_grideye_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grideye_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GridEye); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grideye_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GridEyeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grideye_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GridEyes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grideye_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Retrieve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grideye_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_grideye_proto_goTypes,
		DependencyIndexes: file_grideye_proto_depIdxs,
		MessageInfos:      file_grideye_proto_msgTypes,
	}.Build()
	File_grideye_proto = out.File
	file_grideye_proto_rawDesc = nil
	file_grideye_proto_goTypes = nil
	file_grideye_proto_depIdxs = nil
}
